name: ðŸš€ Release

on:
  push:
    tags: ["v[0-9]+.[0-9]+.[0-9]+*"]

jobs:
  build:
    name: Build
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        arch: [ "x86_64", "aarch64" ]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Setup Rust toolchain and cache
        uses: actions-rust-lang/setup-rust-toolchain@v1.3.7
        env:
          RUST_CACHE_KEY_OS: rust-cache-${{ matrix.arch }}
      - name: Install just
        uses: taiki-e/install-action@just
      - name: Install requirements
        if: ${{ matrix.arch == 'x86_64' }}
        run: | 
          sudo env PATH=$PATH arch=${{ matrix.arch }} just ci-prepare
      - name: Install requirements for aarch64
        if: ${{ matrix.arch == 'aarch64' }}
        run: cargo install cross --git https://github.com/cross-rs/cross
      - name: Release build
        run: arch=${{ matrix.arch }} just youki-release
      - name: test
        # TODO(utam0k): The feature test needs nightly
        # run: just test-basic featuretest test-oci
        if: ${{ matrix.arch == 'x86_64' }}
        run: just test-basic test-oci
      - name: Create output directory
        run: mkdir output
      - name: Copy files to output
        run: |
          cp youki output/
          cp README.md output/README.md
          cp LICENSE output/LICENSE
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: output-${{ matrix.arch }}
          path: output/*
  release:
    name: Create Draft Release
    runs-on: ubuntu-20.04
    needs:
      - build
    steps:
      - uses: actions/checkout@v3

      - name: Determine Release Info
        id: info
        env:
          GITHUB_REF: ${{ github.ref }}
        run: |
          VERSION=${GITHUB_REF##*v}
          MAJOR=${VERSION%%.*}
          MINOR=${VERSION%.*}
          MINOR=${MINOR#*.}
          PATCH=${VERSION##*.}
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "OUTPUTDIR=youki_${MAJOR}_${MINOR}_${PATCH}_linux" >> $GITHUB_ENV
          echo "INNERDIR=youki-${VERSION}" >> $GITHUB_ENV

      - name: Create Output Directory
        run: |
          mkdir -p ${{ env.OUTPUTDIR }}-x86_64/${{ env.INNERDIR }}
          mkdir -p ${{ env.OUTPUTDIR }}-aarch64/${{ env.INNERDIR }}

      - name: Download Linux Artifacts for x86_64
        uses: actions/download-artifact@v3
        with:
          name: output-x86_64
          path: ${{ env.OUTPUTDIR }}-x86_64/${{ env.INNERDIR }}
      - name: Download Linux Artifacts for aarch64
        uses: actions/download-artifact@v3
        with:
          name: output-aarch64
          path: ${{ env.OUTPUTDIR }}-aarch64/${{ env.INNERDIR }}
      - name: Restore File Modes
        run: |
          chmod 755 ${{ env.OUTPUTDIR }}-x86_64/${{ env.INNERDIR }}/youki
          chmod 755 ${{ env.OUTPUTDIR }}-aarch64/${{ env.INNERDIR }}/youki
      - name: Create tarball
        run: |
          tar -zcvf ${{ env.OUTPUTDIR }}-x86_64.tar.gz ${{ env.OUTPUTDIR }}-x86_64
          tar -zcvf ${{ env.OUTPUTDIR }}-aarch64.tar.gz ${{ env.OUTPUTDIR }}-aarch64
      - name: Create Release Draft
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ env.VERSION }} Release
          draft: true
          token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            ./${{ env.OUTPUTDIR }}-x86_64.tar.gz
            ./${{ env.OUTPUTDIR }}-aarch64.tar.gz

  docs-pull-request:
    name: Create Docs Pull Request
    runs-on: ubuntu-22.04
    needs:
      - release
    steps:
      - uses: actions/checkout@v3

      - name: Determine Release Info
        id: info
        env:
          GITHUB_REF: ${{ github.ref }}
        run: |
          VERSION=${GITHUB_REF##*v}
          MAJOR=${VERSION%%.*}
          MINOR=${VERSION%.*}
          MINOR=${MINOR#*.}
          PATCH=${VERSION##*.}
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "OUTPUTDIR=youki_${MAJOR}_${MINOR}_${PATCH}_linux" >> $GITHUB_ENV
          echo "INNERDIR=youki-${VERSION}" >> $GITHUB_ENV
      - name: Generator docs
        run: ./scripts/release_tag.sh ${{ env.VERSION }}
      - uses: peter-evans/create-pull-request@v5
        with:
          title: 'docs: Automated docs Update for ${{ env.VERSION }}'
          body: |
            
            Automated changes by [create-pull-request](https://github.com/peter-evans/create-pull-request) GitHub action
          commit-message: |
            ðŸ¤– Automatically updates the version numbers in download links within the documentation.
          branch: docs-${{ env.VERSION }}
          base: main
          signoff: true
          delete-branch: true
  publish:
    name: Publish Packages
    needs: build
    runs-on: ubuntu-20.04
    env:
      CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup Rust toolchain and cache
        uses: actions-rust-lang/setup-rust-toolchain@v1.3.7
      - name: Publish libcgroups
        run: cargo publish -p libcgroups --no-verify
      - name: Publish libcontainer
        run: cargo publish -p libcontainer --no-verify
      - name: Publish liboci-cli
        run: cargo publish -p liboci-cli --no-verify
      - name: Publish youki
        run: cargo publish -p youki --no-verify
